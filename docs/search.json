[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "Task 1: Conceptual Questions\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\n#library(readxl)\n#MyData &lt;- read_excel(\"../MyData.csv\")\n#MyData\n\n\nWhat are the major benefits of using R projects?\n&gt;R allows you to easily interpret, manipulate, and analyze data without having to do a lot of manual work. R pretty much does all the heavy lifting for you.\nWhat is Git and what is GitHub?\n&gt;Git is a version control software that runs in the background and tracks any changes we do in RStudio. There is a folder locally (repo) to associate with Git and it keeps track of all files in this folder (repo). GitHub is an online hosting service for Git-based projects. Github allows you to have a remote file repository tracked by Git.\nWhat are the two main differences between tibble and a data.frame?\n&gt;The default print() method for tibble and a data.frame are not the same. Tibble is much more useful and we get information in rows and columns. The second main difference is the way in which you subset them. [ always returns another tibble, whereas with a data.frame this can reutrn a data.frame or a vector.\nRewrite the following nested fucntion call using baseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\niris_sub &lt;- iris[,3:5]\niris_filtered &lt;- iris_sub[iris_sub[,1]&lt;1.55,]\niris_arranged &lt;- iris_filtered[,c(2,1,3)]\niris_arranged\n\n   Petal.Width Petal.Length Species\n1          0.2          1.4  setosa\n2          0.2          1.4  setosa\n3          0.2          1.3  setosa\n4          0.2          1.5  setosa\n5          0.2          1.4  setosa\n7          0.3          1.4  setosa\n8          0.2          1.5  setosa\n9          0.2          1.4  setosa\n10         0.1          1.5  setosa\n11         0.2          1.5  setosa\n13         0.1          1.4  setosa\n14         0.1          1.1  setosa\n15         0.2          1.2  setosa\n16         0.4          1.5  setosa\n17         0.4          1.3  setosa\n18         0.3          1.4  setosa\n20         0.3          1.5  setosa\n22         0.4          1.5  setosa\n23         0.2          1.0  setosa\n28         0.2          1.5  setosa\n29         0.2          1.4  setosa\n32         0.4          1.5  setosa\n33         0.1          1.5  setosa\n34         0.2          1.4  setosa\n35         0.2          1.5  setosa\n36         0.2          1.2  setosa\n37         0.2          1.3  setosa\n38         0.1          1.4  setosa\n39         0.2          1.3  setosa\n40         0.2          1.5  setosa\n41         0.3          1.3  setosa\n42         0.3          1.3  setosa\n43         0.2          1.3  setosa\n46         0.3          1.4  setosa\n48         0.2          1.4  setosa\n49         0.2          1.5  setosa\n50         0.2          1.4  setosa\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n&gt;Long format data is where each row consists of one observation and each column one variable. Wide format data is where we have more than one observation in a given row, similar to a pivot table in excel. Nearly all of the analysis, summarizing and modeling we do in statistic expects data to be in long format.\n\n\n\nTask 2: Reading Delimited Data\nGlass Data\n1. Read data into R from URL. The glass.data file is a CSV file because each value is separated with a comma.\n\nlibrary(readr)\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = FALSE)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnames(glass_data) &lt;- c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"ca\", \"Ba\",\n\"Fe\", \"Type_of_glass\")\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.)\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\", col_names = FALSE)\n\nRows: 214 Columns: 11\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnames(glass_data) &lt;- c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"ca\", \"Ba\",\n\"Fe\", \"Type_of_glass\")\nglass_data |&gt;\n   mutate(Type_of_glass = \n            ifelse(Type_of_glass == 1, \"building_windows_float_processed\", \n            ifelse(Type_of_glass == 2, \"building_windows_non_float_processed\", \n            ifelse(Type_of_glass == 3, \"vehicle_windows_float_processed\", \n            ifelse(Type_of_glass == 4, \"vehicle_windows_non_float_processed\", \n            ifelse(Type_of_glass == 5, \"containers\", \n            ifelse(Type_of_glass == 6, \"tableware\", \n            ifelse(Type_of_glass == 7, \"headlamps\", NA)))))))) |&gt;\n  filter(Fe &lt; 0.2 & Type_of_glass %in% c(\"tableware\", \"headlamps\"))\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\nYeast Data\n1. Read data into R from URL and add column names. This is a Fixed Width Field (FWF) data set.\n\nlibrary(readr)\nlibrary(dplyr)\nyeast_data &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", fwf_widths(c(12,6,6,6,6,6,6,6,6,3), c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nStart a chain that removes the seq_name and nuc columns.\nContinue chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping\n\n\nlibrary(readr)\nlibrary(dplyr)\nyeast_data &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\", fwf_widths(c(12,6,6,6,6,6,6,6,6,3), c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_data |&gt;\n  select(-\"seq_name\", -\"nuc\") |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.500       0.49    0.500\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.500       0.49    0.500\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.500       0.49    0.500\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.500       0.49    0.500\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.500       0.49    0.500\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500       0.49    0.500\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.500       0.49    0.500\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.500       0.49    0.500\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.500       0.49    0.500\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.500       0.49    0.500\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n\n\n\nTask 2 Cont: Combining Excel and Delimited Data\n\nImport the downloaded excel file of white wine data.\n\n\nlibrary(readxl)\nwhite_wine_data &lt;- read_excel(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\", sheet = excel_sheets(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\")[1])\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nRead in data from the second sheet and rename the column names of the white wine tibble with these variable names.\n\n\nlibrary(readxl)\nwhite_wine_data_2 &lt;- read_excel(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\", sheet = excel_sheets(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\")[2])\nwhite_wine_data_2\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\nnew_col_names &lt;- white_wine_data_2$Variables\nwhite_wine_data |&gt;\n  rename_with(~ new_col_names)\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nAdd a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\n\nlibrary(readxl)\nwhite_wine_data_2 &lt;- read_excel(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\", sheet = excel_sheets(\"/Users/emily/Documents/ST558/Week 3/white-wine.xlsx\")[2])\nwhite_wine_data_2\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\nnew_col_names &lt;- white_wine_data_2$Variables\nwhite_wine_data_edit &lt;-\n  white_wine_data %&gt;%\n  rename_with(~ new_col_names) |&gt;\n  mutate(Type_of_Wine = \"White\")\n\n\nRead in red wine data.\n\n\nlibrary(readr)\nred_wine_data &lt;- read_delim(file = \"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\", col_names = TRUE)\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nnew_col_names &lt;- white_wine_data_2$Variables\nred_wine_data_edit &lt;- \n  red_wine_data %&gt;%\n  rename_with(~ new_col_names) |&gt;\n  mutate(Type_of_Wine = \"Red\") \n\n\nCombine two data sets into one data set.\n\n\ncombined_wine &lt;- dplyr::bind_rows(white_wine_data_edit, red_wine_data_edit)\n\n6-9. Start a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132). Continue your chain to now sort the data from highest quality to lowest. Continue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable. Continue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\ncombined_wine |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(ends_with(\"acid\") | ends_with(\"acidity\"), \"alcohol\", \"Type_of_Wine\", \"quality\") |&gt;\n  group_by(quality) |&gt;\n  mutate(alcohol_mean = mean(alcohol), alcohol_sd = sd(alcohol))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   citric_acid fixed_acidity volatile_acidity alcohol Type_of_Wine quality\n         &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;\n 1        0.45            91             0.27     104 White              9\n 2        0.29            66             0.36     124 White              9\n 3        0.36            74             0.24     125 White              9\n 4        0.34            69             0.36     127 White              9\n 5        0.49            71             0.26     129 White              9\n 6        0.48            62             0.66     128 White              8\n 7        0.48            62             0.66     128 White              8\n 8        0.42            68             0.26     105 White              8\n 9        0.31            67             0.23     107 White              8\n10        0.31            67             0.23     107 White              8\n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;\n\n\n\n\nTask 3: Database Practice\n\nConnect to the database\n\n\nlibrary(DBI)\ncon &lt;- dbConnect(RSQLite::SQLite(), \"/Users/emily/Documents/ST558/Week 3/lahman.db\")\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\nUse the tbl() function and dplyr to return all of the data from the teams table for the year 2015.\n\n\nlibrary(dplyr)\nteams_table &lt;- tbl(con, \"Teams\")\nteams_table |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [/Users/emily/Documents/ST558/Week 3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\n\nRepeat the above by using the sql() function within tbl()\n\n\ntbl(con, sql(\n  \"SELECT *\n  FROM 'Teams'\n  WHERE ('yearID' = 2015.0)\")\n)\n\n# Source:   SQL [0 x 48]\n# Database: sqlite 3.45.2 [/Users/emily/Documents/ST558/Week 3/lahman.db]\n# ℹ 48 variables: yearID &lt;int&gt;, lgID &lt;chr&gt;, teamID &lt;chr&gt;, franchID &lt;chr&gt;,\n#   divID &lt;chr&gt;, Rank &lt;int&gt;, G &lt;int&gt;, Ghome &lt;int&gt;, W &lt;int&gt;, L &lt;int&gt;,\n#   DivWin &lt;chr&gt;, WCWin &lt;chr&gt;, LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;,\n#   H &lt;int&gt;, X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;,\n#   CS &lt;int&gt;, HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;,\n#   SHO &lt;int&gt;, SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;,\n#   SOA &lt;int&gt;, E &lt;int&gt;, DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, …\n\n\n4.Return all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.\n\nhalloffame_table &lt;- tbl(con, \"HallOfFame\")\nhalloffame_table %&gt;%\n  select(yearID, category)\n\n# Source:   SQL [?? x 2]\n# Database: sqlite 3.45.2 [/Users/emily/Documents/ST558/Week 3/lahman.db]\n   yearID category\n    &lt;int&gt; &lt;chr&gt;   \n 1   1936 Player  \n 2   1936 Player  \n 3   1936 Player  \n 4   1936 Player  \n 5   1936 Player  \n 6   1936 Player  \n 7   1936 Player  \n 8   1936 Player  \n 9   1936 Player  \n10   1936 Player  \n# ℹ more rows\n\n\n\nCombine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.\n\n\nhalloffame_table &lt;- inner_join(tbl(con, \"HallOfFame\"),\n          tbl(con, \"People\"),\n           by = join_by(playerID == playerID)) |&gt; \n    collect() |&gt;\n    select(yearID, category, nameFirst, nameLast)\n\n\nReturn only the playerID (manager ID in this case), G, W, and L columns from the Managers table. Use chaining to then: Determine the overall win/loss records (sum of wins and sum of losses) for each of these hall of fame managers.\n\n\nmanagers_table &lt;- tbl(con, \"Managers\")\nmanagers_table &lt;- managers_table %&gt;%\n  select(playerID, G, W, L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\n            Total_W = sum(W, na.rm = TRUE),\n            Total_L = sum(L, na.rm = TRUE)) |&gt;\n  mutate(Win_Loss_Percentage = Total_W/G_managed) |&gt;\n  arrange(desc(Win_Loss_Percentage))\n\n\nReturn information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame)\n\n\nhalloffame_managers &lt;- merge(tbl(con, \"HallOfFame\"), tbl(con, \"Managers\"), by = \"playerID\", all = FALSE)"
  }
]
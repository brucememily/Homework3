---
title: "Homework 3"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 1: Conceptual Questions

1. If your working directory is myfolder/homework/, what relative path would you specify to get the file
located at myfolder/MyData.csv?
```{r}
#library(readxl)
#MyData <- read_excel("../MyData.csv")
#MyData
```

2. What are the major benefits of using R projects? \
>R allows you to easily interpret, manipulate, and analyze data without having to do a lot of manual work. R pretty much does all the heavy lifting for you. 

3. What is Git and what is GitHub? \
>Git is a version control software that runs in the background and tracks any changes we do in RStudio. There is a folder locally (repo) to associate with Git and it keeps track of all files in this folder (repo). GitHub is an online hosting service for Git-based projects. Github allows you to have a remote file repository tracked by Git. 

4. What are the two main differences between tibble and a data.frame? \
>The default print() method for tibble and a data.frame are not the same. Tibble is much more useful and we get information in rows and columns. The second main difference is the way in which you subset them. [ always returns another tibble, whereas with a data.frame this can reutrn a data.frame or a vector. 

5. Rewrite the following nested fucntion call using baseR's chaining operator:
arrange(filter(select(as_tibble(iris), starts_with("Petal"), Species), Petal.Length <
1.55), Species)
```{r}
iris_sub <- iris[,3:5]
iris_filtered <- iris_sub[iris_sub[,1]<1.55,]
iris_arranged <- iris_filtered[,c(2,1,3)]
iris_arranged
```

6. What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis? \
>Long format data is where each row consists of one observation and each column one variable. Wide format data is where we have more than one observation in a given row, similar to a pivot table in excel. Nearly all of the analysis, summarizing and modeling we do in statistic expects data to be in long format. 

# Task 2: Reading Delimited Data

Glass Data \
1. Read data into R from URL. The glass.data file is a CSV file because each value is separated with a comma. 

```{r}
library(readr)
glass_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data", col_names = FALSE)
names(glass_data) <- c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "ca", "Ba",
"Fe", "Type_of_glass")
```

2. Start a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . . ”,
etc.) 

```{r}
library(readr)
library(dplyr)
glass_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/glass.data", col_names = FALSE)
names(glass_data) <- c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "ca", "Ba",
"Fe", "Type_of_glass")
glass_data |>
   mutate(Type_of_glass = 
            ifelse(Type_of_glass == 1, "building_windows_float_processed", 
            ifelse(Type_of_glass == 2, "building_windows_non_float_processed", 
            ifelse(Type_of_glass == 3, "vehicle_windows_float_processed", 
            ifelse(Type_of_glass == 4, "vehicle_windows_non_float_processed", 
            ifelse(Type_of_glass == 5, "containers", 
            ifelse(Type_of_glass == 6, "tableware", 
            ifelse(Type_of_glass == 7, "headlamps", NA)))))))) |>
  filter(Fe < 0.2 & Type_of_glass %in% c("tableware", "headlamps"))
```

Yeast Data \
1. Read data into R from URL and add column names. This is a Fixed Width Field (FWF) data set. 
```{r}
library(readr)
library(dplyr)
yeast_data <- read_fwf("https://www4.stat.ncsu.edu/~online/datasets/yeast.data", fwf_widths(c(12,6,6,6,6,6,6,6,6,3), c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class")))
```

2. Start a chain that removes the seq_name and nuc columns.
3. Continue chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping
```{r}
library(readr)
library(dplyr)
yeast_data <- read_fwf("https://www4.stat.ncsu.edu/~online/datasets/yeast.data", fwf_widths(c(12,6,6,6,6,6,6,6,6,3), c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class")))
yeast_data |>
  select(-"seq_name", -"nuc") |>
  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = "{.col}_{.fn}"))
```

# Task 2 Cont: Combining Excel and Delimited Data

1. Import the downloaded excel file of white wine data. 
```{r}
library(readxl)
white_wine_data <- read_excel("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx", sheet = excel_sheets("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx")[1])
white_wine_data
```

2. Read in data from the second sheet and rename the column names of the white wine tibble with these variable names. 
```{r}
library(readxl)
white_wine_data_2 <- read_excel("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx", sheet = excel_sheets("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx")[2])
white_wine_data_2
new_col_names <- white_wine_data_2$Variables
white_wine_data |>
  rename_with(~ new_col_names)
```

3. Add a column to this data set to indicate the wines are white. That is, add a column that has values of 'white' for every observation. 
```{r}
library(readxl)
white_wine_data_2 <- read_excel("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx", sheet = excel_sheets("/Users/emily/Documents/ST558/Week 3/white-wine.xlsx")[2])
white_wine_data_2
new_col_names <- white_wine_data_2$Variables
white_wine_data_edit <-
  white_wine_data %>%
  rename_with(~ new_col_names) |>
  mutate(Type_of_Wine = "White")
```

4. Read in red wine data. 
```{r}
library(readr)
red_wine_data <- read_delim(file = "https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv", delim = ";", col_names = TRUE)
new_col_names <- white_wine_data_2$Variables
red_wine_data_edit <- 
  red_wine_data %>%
  rename_with(~ new_col_names) |>
  mutate(Type_of_Wine = "Red") 
```

5. Combine two data sets into one data set. 
```{r}
combined_wine <- dplyr::bind_rows(white_wine_data_edit, red_wine_data_edit)
```

6-9. Start a chain on your new combined data object to filter the data to only look at high-quality wines (quality > 6.5) and wines that have a reasonable alcohol value (alcohol < 132). Continue your chain to now sort the data from highest quality to lowest. Continue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable. Continue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.

```{r}
combined_wine |>
  filter(quality > 6.5 & alcohol < 132) |>
  arrange(desc(quality)) |>
  select(ends_with("acid") | ends_with("acidity"), "alcohol", "Type_of_Wine", "quality") |>
  group_by(quality) |>
  mutate(alcohol_mean = mean(alcohol), alcohol_sd = sd(alcohol))
```

# Task 3: Database Practice

1. Connect to the database
```{r}
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "/Users/emily/Documents/ST558/Week 3/lahman.db")
dbListTables(con)
```

2. Use the tbl() function and dplyr to return all of the data from the teams table for the year 2015.
```{r}
library(dplyr)
teams_table <- tbl(con, "Teams")
teams_table |>
  filter(yearID == 2015)
```

3. Repeat the above by using the sql() function within tbl()
```{r}
tbl(con, sql(
  "SELECT *
  FROM 'Teams'
  WHERE ('yearID' = 2015.0)")
)
```

4.Return all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.
```{r}
halloffame_table <- tbl(con, "HallOfFame")
halloffame_table %>%
  select(yearID, category)
```

5. Combine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.
```{r}
halloffame_table <- inner_join(tbl(con, "HallOfFame"),
          tbl(con, "People"),
           by = join_by(playerID == playerID)) |> 
    collect() |>
    select(yearID, category, nameFirst, nameLast)
```

6. Return only the playerID (manager ID in this case), G, W, and L columns from the Managers table. Use chaining to then: Determine the overall win/loss records (sum of wins and sum of losses) for each of these hall of fame managers.

```{r}
managers_table <- tbl(con, "Managers")
managers_table <- managers_table %>%
  select(playerID, G, W, L) |>
  group_by(playerID) |>
  summarize(G_managed = sum(G, na.rm = TRUE),
            Total_W = sum(W, na.rm = TRUE),
            Total_L = sum(L, na.rm = TRUE)) |>
  mutate(Win_Loss_Percentage = Total_W/G_managed) |>
  arrange(desc(Win_Loss_Percentage))
```

7. Return information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame) 

```{r}
halloffame_managers <- merge(tbl(con, "HallOfFame"), tbl(con, "Managers"), by = "playerID", all = FALSE)
```

